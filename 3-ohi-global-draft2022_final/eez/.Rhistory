# Rows duplicated...
# ss_spi: 660
# res_spi: 660
# ico_spp_iucn_status: 15776
# mar_sustainability_score: 1
# calculate scores for each year scenario and save to a single csv file:
## General function to calculate scores
get_scores <- function(s_year){  #s_year=2020
#s_year <- as.numeric(s_year)
print(sprintf("For assessment year %s", s_year))
# set the scenario year
layers$data$scenario_year <-  s_year
# clear out the file that keeps track of reference points for each scenario year
if(file.exists(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year)))
{file.remove(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))}
ref_pts <- data.frame(year   = as.integer(),
goal   = as.character(),
method = as.character(),
reference_point = as.character())
write_csv(ref_pts, sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))
# calculate scores
scores_sy <- ohicore::CalculateAll(conf, layers) %>%
dplyr::mutate(year = s_year)
}
## Apply function
### set up conf and layer objects
conf   <-  ohicore::Conf(here('eez/conf'))
layers <-  ohicore::Layers(layers.csv = here('eez/layers.csv'), layers.dir = here('eez/layers'))
#scorelist = lapply(X=2018, FUN=get_scores)
scorelist = lapply(X=scenario_years, FUN=get_scores) # 27 warnings were generated (nothing of concern)
scores_all_years <- dplyr::bind_rows(scorelist)
# save results
write.csv(scores_all_years, here('eez/scores.csv'), na='', row.names=F)
## Apply function
### set up conf and layer objects
conf   <-  ohicore::Conf(here('eez/conf'))
layers <-  ohicore::Layers(layers.csv = here('eez/layers.csv'), layers.dir = here('eez/layers'))
#scorelist = lapply(X=2018, FUN=get_scores)
scorelist = lapply(X=scenario_years, FUN=get_scores)
# 27 warnings were generated (nothing of concern)
scores_all_years <- dplyr::bind_rows(scorelist)
## Apply function
### set up conf and layer objects
conf   <-  ohicore::Conf(here('eez/conf'))
layers <-  ohicore::Layers(layers.csv = here('eez/layers.csv'), layers.dir = here('eez/layers'))
#scorelist = lapply(X=2018, FUN=get_scores)
scorelist = lapply(X=scenario_years, FUN=get_scores)
# 27 warnings were generated (nothing of concern)
scores_all_years <- dplyr::bind_rows(scorelist)
## Apply function
### set up conf and layer objects
conf   <-  ohicore::Conf(here('eez/conf'))
layers <-  ohicore::Layers(layers.csv = here('eez/layers.csv'), layers.dir = here('eez/layers'))
#scorelist = lapply(X=2018, FUN=get_scores)
scorelist = lapply(X=scenario_years, FUN=get_scores)
# 27 warnings were generated (nothing of concern)
scores_all_years <- dplyr::bind_rows(scorelist)
source(here("metadata_documentation", "layers_eez_script.R"))
## Read in the layers.csv file with paths to the data files
g <- read.csv(here("eez/layers.csv"), stringsAsFactors = FALSE, na.strings='')
## establish locations of layers and save information
lyrs = g %>%
dplyr::filter(ingest==TRUE) %>%
dplyr::mutate(dir = gsub("ohiprep:", repo_loc, dir)) %>%
dplyr::mutate(
path_in        = file.path(dir, fn),
#path_in_exists = file.exists(path_in),
filename = sprintf('%s.csv', layer),
path_out = sprintf(here('eez/layers/%s.csv'), layer)) %>%
dplyr::select(
targets, layer, name, description,
fld_value=name_data_fld, units,
path_in, filename, path_out, ingest) %>%  # path_in_exists
dplyr::arrange(targets, layer)
# copy layers into layers folder
# for (j in 1:nrow(lyrs)){ # j=4
#  tmp <- read.csv(lyrs$path_in[j])
#  write.csv(tmp, lyrs$path_out[j], row.names=FALSE)
# }
# delete extraneous files
files_extra = setdiff(list.files('layers'), as.character(lyrs$filename))
unlink(sprintf('layers/%s', files_extra))
# layers registry (this includes files that are ingest=FALSE)
lyrs_reg = lyrs %>%
dplyr::select(
targets, ingest, layer, name, description,
fld_value, units, filename)
write.csv(lyrs_reg, here('eez/layers.csv'), row.names=F, na='')
# Run check on layers
conf   = ohicore::Conf(here('eez/conf'))
ohicore::CheckLayers(layers.csv = here('eez/layers.csv'),
layers.dir = here('eez/layers'),
flds_id    = conf$config$layers_id_fields)
## some warnings like this are ok here (check on duplicated rows):
# Unused fields...
# uninhabited: southern_island,est_population
# ico_spp_iucn_status: iucn_sid,eval_yr
# mar_harvest_tonnes: taxa_group,family
# Layers missing data, ie all NA ...
# element_wts_cp_km2_x_protection: element_wts_cp_km2_x_protection.csv
# element_wts_cs_km2_x_storage: element_wts_cs_km2_x_storage.csv
# element_wts_hab_pres_abs: element_wts_hab_pres_abs.csv
# Rows duplicated...
# ss_spi: 660
# res_spi: 660
# ico_spp_iucn_status: 15776
# mar_sustainability_score: 1
# calculate scores for each year scenario and save to a single csv file:
source(here("metadata_documentation", "layers_eez_script.R"))
## Read in the layers.csv file with paths to the data files
g <- read.csv(here("eez/layers.csv"), stringsAsFactors = FALSE, na.strings='')
## establish locations of layers and save information
lyrs = g %>%
dplyr::filter(ingest==TRUE) %>%
dplyr::mutate(dir = gsub("ohiprep:", repo_loc, dir)) %>%
dplyr::mutate(
path_in        = file.path(dir, fn),
#path_in_exists = file.exists(path_in),
filename = sprintf('%s.csv', layer),
path_out = sprintf(here('eez/layers/%s.csv'), layer)) %>%
dplyr::select(
targets, layer, name, description,
fld_value=name_data_fld, units,
path_in, filename, path_out, ingest) %>%  # path_in_exists
dplyr::arrange(targets, layer)
# copy layers into layers folder
# for (j in 1:nrow(lyrs)){ # j=4
#  tmp <- read.csv(lyrs$path_in[j])
#  write.csv(tmp, lyrs$path_out[j], row.names=FALSE)
# }
# delete extraneous files
files_extra = setdiff(list.files('layers'), as.character(lyrs$filename))
unlink(sprintf('layers/%s', files_extra))
# layers registry (this includes files that are ingest=FALSE)
lyrs_reg = lyrs %>%
dplyr::select(
targets, ingest, layer, name, description,
fld_value, units, filename)
write.csv(lyrs_reg, here('eez/layers.csv'), row.names=F, na='')
# Run check on layers
conf   = ohicore::Conf(here('eez/conf'))
ohicore::CheckLayers(layers.csv = here('eez/layers.csv'),
layers.dir = here('eez/layers'),
flds_id    = conf$config$layers_id_fields)
## some warnings like this are ok here (check on duplicated rows):
# Unused fields...
# uninhabited: southern_island,est_population
# ico_spp_iucn_status: iucn_sid,eval_yr
# mar_harvest_tonnes: taxa_group,family
# Layers missing data, ie all NA ...
# element_wts_cp_km2_x_protection: element_wts_cp_km2_x_protection.csv
# element_wts_cs_km2_x_storage: element_wts_cs_km2_x_storage.csv
# element_wts_hab_pres_abs: element_wts_hab_pres_abs.csv
# Rows duplicated...
# ss_spi: 660
# res_spi: 660
# ico_spp_iucn_status: 15776
# mar_sustainability_score: 1
# calculate scores for each year scenario and save to a single csv file:
## General function to calculate scores
get_scores <- function(s_year){  #s_year=2020
#s_year <- as.numeric(s_year)
print(sprintf("For assessment year %s", s_year))
# set the scenario year
layers$data$scenario_year <-  s_year
# clear out the file that keeps track of reference points for each scenario year
if(file.exists(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year)))
{file.remove(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))}
ref_pts <- data.frame(year   = as.integer(),
goal   = as.character(),
method = as.character(),
reference_point = as.character())
write_csv(ref_pts, sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))
# calculate scores
scores_sy <- ohicore::CalculateAll(conf, layers) %>%
dplyr::mutate(year = s_year)
}
## Apply function
### set up conf and layer objects
conf   <-  ohicore::Conf(here('eez/conf'))
layers <-  ohicore::Layers(layers.csv = here('eez/layers.csv'), layers.dir = here('eez/layers'))
#scorelist = lapply(X=2018, FUN=get_scores)
scorelist = lapply(X=scenario_years, FUN=get_scores)
# 27 warnings were generated (nothing of concern)
scores_all_years <- dplyr::bind_rows(scorelist)
# save results
write.csv(scores_all_years, here('eez/scores.csv'), na='', row.names=F)
## Apply function
### set up conf and layer objects
conf   <-  ohicore::Conf(here('eez/conf'))
layers <-  ohicore::Layers(layers.csv = here('eez/layers.csv'), layers.dir = here('eez/layers'))
#scorelist = lapply(X=2018, FUN=get_scores)
scorelist = lapply(X=scenario_years, FUN=get_scores)
# 27 warnings were generated (nothing of concern)
scores_all_years <- dplyr::bind_rows(scorelist)
## Apply function
### set up conf and layer objects
conf   <-  ohicore::Conf(here('eez/conf'))
layers <-  ohicore::Layers(layers.csv = here('eez/layers.csv'), layers.dir = here('eez/layers'))
#scorelist = lapply(X=2018, FUN=get_scores)
scorelist = lapply(X=scenario_years, FUN=get_scores)
# 27 warnings were generated (nothing of concern)
scores_all_years <- dplyr::bind_rows(scorelist)
# Chunk 5
## run function and respond to prompts in console if layers_eez_base.csv needs to be updated
layers_eez_base_updater()
# Chunk 5
## run function and respond to prompts in console if layers_eez_base.csv needs to be updated
#layers_eez_base_updater()
# Chunk 8
## General function to calculate scores
get_scores <- function(s_year){  #s_year=2020
#s_year <- as.numeric(s_year)
print(sprintf("For assessment year %s", s_year))
# set the scenario year
layers$data$scenario_year <-  s_year
# clear out the file that keeps track of reference points for each scenario year
if(file.exists(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year)))
{file.remove(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))}
ref_pts <- data.frame(year   = as.integer(),
goal   = as.character(),
method = as.character(),
reference_point = as.character())
write_csv(ref_pts, sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))
# calculate scores
scores_sy <- ohicore::CalculateAll(conf, layers) %>%
dplyr::mutate(year = s_year)
}
# Chunk 9
## Apply function
### set up conf and layer objects
conf   <-  ohicore::Conf(here('eez/conf'))
layers <-  ohicore::Layers(layers.csv = here('eez/layers.csv'), layers.dir = here('eez/layers'))
#scorelist = lapply(X=2018, FUN=get_scores)
scorelist = lapply(X=scenario_years, FUN=get_scores)
# 27 warnings were generated (nothing of concern)
scores_all_years <- dplyr::bind_rows(scorelist)
# Chunk 10
# save results
write.csv(scores_all_years, here('eez/scores.csv'), na='', row.names=F)
source(here("metadata_documentation", "layers_eez_script.R"))
## Read in the layers.csv file with paths to the data files
g <- read.csv(here("eez/layers.csv"), stringsAsFactors = FALSE, na.strings='')
## establish locations of layers and save information
lyrs = g %>%
dplyr::filter(ingest==TRUE) %>%
dplyr::mutate(dir = gsub("ohiprep:", repo_loc, dir)) %>%
dplyr::mutate(
path_in        = file.path(dir, fn),
#path_in_exists = file.exists(path_in),
filename = sprintf('%s.csv', layer),
path_out = sprintf(here('eez/layers/%s.csv'), layer)) %>%
dplyr::select(
targets, layer, name, description,
fld_value=name_data_fld, units,
path_in, filename, path_out, ingest) %>%  # path_in_exists
dplyr::arrange(targets, layer)
# copy layers into layers folder
# for (j in 1:nrow(lyrs)){ # j=4
#  tmp <- read.csv(lyrs$path_in[j])
#  write.csv(tmp, lyrs$path_out[j], row.names=FALSE)
# }
# delete extraneous files
files_extra = setdiff(list.files('layers'), as.character(lyrs$filename))
unlink(sprintf('layers/%s', files_extra))
# layers registry (this includes files that are ingest=FALSE)
lyrs_reg = lyrs %>%
dplyr::select(
targets, ingest, layer, name, description,
fld_value, units, filename)
write.csv(lyrs_reg, here('eez/layers.csv'), row.names=F, na='')
# Run check on layers
conf   = ohicore::Conf(here('eez/conf'))
ohicore::CheckLayers(layers.csv = here('eez/layers.csv'),
layers.dir = here('eez/layers'),
flds_id    = conf$config$layers_id_fields)
## some warnings like this are ok here (check on duplicated rows):
# Unused fields...
# uninhabited: southern_island,est_population
# ico_spp_iucn_status: iucn_sid,eval_yr
# mar_harvest_tonnes: taxa_group,family
# Layers missing data, ie all NA ...
# element_wts_cp_km2_x_protection: element_wts_cp_km2_x_protection.csv
# element_wts_cs_km2_x_storage: element_wts_cs_km2_x_storage.csv
# element_wts_hab_pres_abs: element_wts_hab_pres_abs.csv
# Rows duplicated...
# ss_spi: 660
# res_spi: 660
# ico_spp_iucn_status: 15776
# mar_sustainability_score: 1
# calculate scores for each year scenario and save to a single csv file:
## General function to calculate scores
get_scores <- function(s_year){  #s_year=2020
#s_year <- as.numeric(s_year)
print(sprintf("For assessment year %s", s_year))
# set the scenario year
layers$data$scenario_year <-  s_year
# clear out the file that keeps track of reference points for each scenario year
if(file.exists(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year)))
{file.remove(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))}
ref_pts <- data.frame(year   = as.integer(),
goal   = as.character(),
method = as.character(),
reference_point = as.character())
write_csv(ref_pts, sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))
# calculate scores
scores_sy <- ohicore::CalculateAll(conf, layers) %>%
dplyr::mutate(year = s_year)
}
## Apply function
### set up conf and layer objects
conf   <-  ohicore::Conf(here('eez/conf'))
layers <-  ohicore::Layers(layers.csv = here('eez/layers.csv'), layers.dir = here('eez/layers'))
#scorelist = lapply(X=2018, FUN=get_scores)
scorelist = lapply(X=scenario_years, FUN=get_scores)
# 27 warnings were generated (nothing of concern)
scores_all_years <- dplyr::bind_rows(scorelist)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, eval = FALSE, echo = TRUE)
if (!require(devtools)){install.packages("devtools")}
if (!require(ohicore)){devtools::install_github('ohi-science/ohicore@dev')}
current_year <- 2022
version_year <- paste0("v", current_year)
repo_loc <- paste0("https://raw.githubusercontent.com/OHI-Science/ohiprep_", version_year, "/gh-pages/")
scenario_years <- c(2012:current_year)
## load packages:
if (!require(librarian)){install.packages("librarian")}
librarian::shelf(
tidyverse,
here,
ohicore,
plotly,
zoo,
htmlwidgets
)
## source file path info depending on operating system
source(paste0('http://ohi-science.org/ohiprep_', version_year, '/workflow/R/common.R'))
source(here("metadata_documentation", "layers_eez_script.R"))
## Read in the layers.csv file with paths to the data files
g <- read.csv(here("eez/layers.csv"), stringsAsFactors = FALSE, na.strings='')
## establish locations of layers and save information
lyrs = g %>%
dplyr::filter(ingest==TRUE) %>%
dplyr::mutate(dir = gsub("ohiprep:", repo_loc, dir)) %>%
dplyr::mutate(
path_in        = file.path(dir, fn),
#path_in_exists = file.exists(path_in),
filename = sprintf('%s.csv', layer),
path_out = sprintf(here('eez/layers/%s.csv'), layer)) %>%
dplyr::select(
targets, layer, name, description,
fld_value=name_data_fld, units,
path_in, filename, path_out, ingest) %>%  # path_in_exists
dplyr::arrange(targets, layer)
# copy layers into layers folder
# for (j in 1:nrow(lyrs)){ # j=4
#  tmp <- read.csv(lyrs$path_in[j])
#  write.csv(tmp, lyrs$path_out[j], row.names=FALSE)
# }
# delete extraneous files
files_extra = setdiff(list.files('layers'), as.character(lyrs$filename))
unlink(sprintf('layers/%s', files_extra))
# layers registry (this includes files that are ingest=FALSE)
lyrs_reg = lyrs %>%
dplyr::select(
targets, ingest, layer, name, description,
fld_value, units, filename)
write.csv(lyrs_reg, here('eez/layers.csv'), row.names=F, na='')
# Run check on layers
conf   = ohicore::Conf(here('eez/conf'))
ohicore::CheckLayers(layers.csv = here('eez/layers.csv'),
layers.dir = here('eez/layers'),
flds_id    = conf$config$layers_id_fields)
## some warnings like this are ok here (check on duplicated rows):
# Unused fields...
# uninhabited: southern_island,est_population
# ico_spp_iucn_status: iucn_sid,eval_yr
# mar_harvest_tonnes: taxa_group,family
# Layers missing data, ie all NA ...
# element_wts_cp_km2_x_protection: element_wts_cp_km2_x_protection.csv
# element_wts_cs_km2_x_storage: element_wts_cs_km2_x_storage.csv
# element_wts_hab_pres_abs: element_wts_hab_pres_abs.csv
# Rows duplicated...
# ss_spi: 660
# res_spi: 660
# ico_spp_iucn_status: 15776
# mar_sustainability_score: 1
# calculate scores for each year scenario and save to a single csv file:
## General function to calculate scores
get_scores <- function(s_year){  #s_year=2020
#s_year <- as.numeric(s_year)
print(sprintf("For assessment year %s", s_year))
# set the scenario year
layers$data$scenario_year <-  s_year
# clear out the file that keeps track of reference points for each scenario year
if(file.exists(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year)))
{file.remove(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))}
ref_pts <- data.frame(year   = as.integer(),
goal   = as.character(),
method = as.character(),
reference_point = as.character())
write_csv(ref_pts, sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))
# calculate scores
scores_sy <- ohicore::CalculateAll(conf, layers) %>%
dplyr::mutate(year = s_year)
}
## Apply function
### set up conf and layer objects
conf   <-  ohicore::Conf(here('eez/conf'))
layers <-  ohicore::Layers(layers.csv = here('eez/layers.csv'), layers.dir = here('eez/layers'))
#scorelist = lapply(X=2018, FUN=get_scores)
scorelist = lapply(X=scenario_years, FUN=get_scores) # 27 warnings were generated (nothing of concern)
scores_all_years <- dplyr::bind_rows(scorelist)
# save results
write.csv(scores_all_years, here('eez/scores.csv'), na='', row.names=F)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, eval = FALSE, echo = TRUE)
if (!require(devtools)){install.packages("devtools")}
if (!require(ohicore)){devtools::install_github('ohi-science/ohicore@dev')}
current_year <- 2022
version_year <- paste0("v", current_year)
repo_loc <- paste0("https://raw.githubusercontent.com/OHI-Science/ohiprep_", version_year, "/gh-pages/")
scenario_years <- c(2012:current_year)
## load packages:
if (!require(librarian)){install.packages("librarian")}
librarian::shelf(
tidyverse,
here,
ohicore,
plotly,
zoo,
htmlwidgets
)
## source file path info depending on operating system
source(paste0('http://ohi-science.org/ohiprep_', version_year, '/workflow/R/common.R'))
source(here("metadata_documentation", "layers_eez_script.R"))
source(here("metadata_documentation", "layers_eez_script.R"))
## Read in the layers.csv file with paths to the data files
g <- read.csv(here("eez/layers.csv"), stringsAsFactors = FALSE, na.strings='')
## establish locations of layers and save information
lyrs = g %>%
dplyr::filter(ingest==TRUE) %>%
dplyr::mutate(dir = gsub("ohiprep:", repo_loc, dir)) %>%
dplyr::mutate(
path_in        = file.path(dir, fn),
#path_in_exists = file.exists(path_in),
filename = sprintf('%s.csv', layer),
path_out = sprintf(here('eez/layers/%s.csv'), layer)) %>%
dplyr::select(
targets, layer, name, description,
fld_value=name_data_fld, units,
path_in, filename, path_out, ingest) %>%  # path_in_exists
dplyr::arrange(targets, layer)
# copy layers into layers folder
# for (j in 1:nrow(lyrs)){ # j=4
#  tmp <- read.csv(lyrs$path_in[j])
#  write.csv(tmp, lyrs$path_out[j], row.names=FALSE)
# }
# delete extraneous files
files_extra = setdiff(list.files('layers'), as.character(lyrs$filename))
unlink(sprintf('layers/%s', files_extra))
# layers registry (this includes files that are ingest=FALSE)
lyrs_reg = lyrs %>%
dplyr::select(
targets, ingest, layer, name, description,
fld_value, units, filename)
write.csv(lyrs_reg, here('eez/layers.csv'), row.names=F, na='')
# Run check on layers
conf   = ohicore::Conf(here('eez/conf'))
ohicore::CheckLayers(layers.csv = here('eez/layers.csv'),
layers.dir = here('eez/layers'),
flds_id    = conf$config$layers_id_fields)
## some warnings like this are ok here (check on duplicated rows):
# Unused fields...
# uninhabited: southern_island,est_population
# ico_spp_iucn_status: iucn_sid,eval_yr
# mar_harvest_tonnes: taxa_group,family
# Layers missing data, ie all NA ...
# element_wts_cp_km2_x_protection: element_wts_cp_km2_x_protection.csv
# element_wts_cs_km2_x_storage: element_wts_cs_km2_x_storage.csv
# element_wts_hab_pres_abs: element_wts_hab_pres_abs.csv
# Rows duplicated...
# ss_spi: 660
# res_spi: 660
# ico_spp_iucn_status: 15776
# mar_sustainability_score: 1
# calculate scores for each year scenario and save to a single csv file:
## General function to calculate scores
get_scores <- function(s_year){  #s_year=2020
#s_year <- as.numeric(s_year)
print(sprintf("For assessment year %s", s_year))
# set the scenario year
layers$data$scenario_year <-  s_year
# clear out the file that keeps track of reference points for each scenario year
if(file.exists(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year)))
{file.remove(sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))}
ref_pts <- data.frame(year   = as.integer(),
goal   = as.character(),
method = as.character(),
reference_point = as.character())
write_csv(ref_pts, sprintf(here('eez/temp/reference_pts_%s.csv'), s_year))
# calculate scores
scores_sy <- ohicore::CalculateAll(conf, layers) %>%
dplyr::mutate(year = s_year)
}
## Apply function
### set up conf and layer objects
conf   <-  ohicore::Conf(here('eez/conf'))
layers <-  ohicore::Layers(layers.csv = here('eez/layers.csv'), layers.dir = here('eez/layers'))
#scorelist = lapply(X=2018, FUN=get_scores)
scorelist = lapply(X=scenario_years, FUN=get_scores) # 27 warnings were generated (nothing of concern)
scores_all_years <- dplyr::bind_rows(scorelist)
# save results
write.csv(scores_all_years, here('eez/scores.csv'), na='', row.names=F)
